{"ast":null,"code":"var _jsxFileName = \"/Users/samanthawongsf/weather-app-v.2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport CurrentWeather from './components/CurrentWeather';\nimport HourlyForecast from './components/HourlyForecast';\nimport DailyForecast from './components/DailyForecast';\nimport HistoricalData from './components/HistoricalData';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport TempUnitToggle from './components/TempUnitToggle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State variables\n  const [city, setCity] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [hourlyForecast, setHourlyForecast] = useState(null);\n  const [dailyForecast, setDailyForecast] = useState(null);\n  const [historicalData, setHistoricalData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isFahrenheit, setIsFahrenheit] = useState(false);\n  const [userCoords, setUserCoords] = useState(null);\n  const API_KEY = 'f9fe1a574e2792d51fa92b035382ef81';\n\n  // Function to get user's location\n  const getUserLocation = () => {\n    setLoading(true);\n    setError(null);\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setUserCoords({\n          lat: latitude,\n          lon: longitude\n        });\n        fetchWeatherByCoords(latitude, longitude);\n      }, err => {\n        setLoading(false);\n        setError({\n          type: 'location',\n          message: `Unable to get your location: ${err.message}. Please search for a city instead.`\n        });\n      });\n    } else {\n      setLoading(false);\n      setError({\n        type: 'location',\n        message: 'Geolocation is not supported by your browser. Please search for a city instead.'\n      });\n    }\n  };\n\n  // Fetch weather data by coordinates\n  const fetchWeatherByCoords = async (lat, lon) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Current weather\n      const currentWeatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`);\n      if (!currentWeatherResponse.ok) {\n        throw new Error(`Weather data not available (${currentWeatherResponse.status})`);\n      }\n      const currentData = await currentWeatherResponse.json();\n      setCurrentWeather(currentData);\n      setCity(currentData.name);\n\n      // One Call API for hourly and daily forecasts\n      const oneCallResponse = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely&appid=${API_KEY}`);\n      if (!oneCallResponse.ok) {\n        throw new Error(`Forecast data not available (${oneCallResponse.status})`);\n      }\n      const oneCallData = await oneCallResponse.json();\n      setHourlyForecast(oneCallData.hourly.slice(0, 24));\n      setDailyForecast(oneCallData.daily.slice(0, 5));\n\n      // Historical data (last 5 days)\n      const historicalDataArray = [];\n      const currentDate = Math.floor(Date.now() / 1000);\n      for (let i = 1; i <= 5; i++) {\n        const date = currentDate - i * 24 * 60 * 60;\n        const historicalResponse = await fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${date}&appid=${API_KEY}`);\n        if (historicalResponse.ok) {\n          const historicalData = await historicalResponse.json();\n          historicalDataArray.push(historicalData);\n        }\n      }\n      setHistoricalData(historicalDataArray);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError({\n        type: 'api',\n        message: `Error fetching weather data: ${err.message}`\n      });\n    }\n  };\n\n  // Fetch weather by city name\n  const fetchWeatherByCity = async cityName => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Current weather\n      const currentWeatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}`);\n      if (!currentWeatherResponse.ok) {\n        if (currentWeatherResponse.status === 404) {\n          throw new Error(`City \"${cityName}\" not found. Please check the spelling and try again.`);\n        } else {\n          throw new Error(`Weather data not available (${currentWeatherResponse.status})`);\n        }\n      }\n      const currentData = await currentWeatherResponse.json();\n      setCurrentWeather(currentData);\n      setCity(currentData.name);\n\n      // Get coordinates from current weather response\n      const {\n        lat,\n        lon\n      } = currentData.coord;\n      setUserCoords({\n        lat,\n        lon\n      });\n\n      // One Call API for hourly and daily forecasts\n      const oneCallResponse = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely&appid=${API_KEY}`);\n      if (!oneCallResponse.ok) {\n        throw new Error(`Forecast data not available (${oneCallResponse.status})`);\n      }\n      const oneCallData = await oneCallResponse.json();\n      setHourlyForecast(oneCallData.hourly.slice(0, 24));\n      setDailyForecast(oneCallData.daily.slice(0, 5));\n\n      // Historical data (last 5 days)\n      const historicalDataArray = [];\n      const currentDate = Math.floor(Date.now() / 1000);\n      for (let i = 1; i <= 5; i++) {\n        const date = currentDate - i * 24 * 60 * 60;\n        const historicalResponse = await fetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${date}&appid=${API_KEY}`);\n        if (historicalResponse.ok) {\n          const historicalData = await historicalResponse.json();\n          historicalDataArray.push(historicalData);\n        }\n      }\n      setHistoricalData(historicalDataArray);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError({\n        type: 'api',\n        message: `Error fetching weather data: ${err.message}`\n      });\n    }\n  };\n\n  // Toggle temperature unit\n  const toggleTemperatureUnit = () => {\n    setIsFahrenheit(!isFahrenheit);\n  };\n\n  // Handle city search\n  const handleCitySearch = cityName => {\n    if (cityName.trim() === '') {\n      setError({\n        type: 'input',\n        message: 'Please enter a city name.'\n      });\n      return;\n    }\n    setCity(cityName);\n    fetchWeatherByCity(cityName);\n  };\n\n  // Load user location on initial component mount\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weather App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: handleCitySearch,\n        onLocationRequest: getUserLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TempUnitToggle, {\n        isFahrenheit: isFahrenheit,\n        onToggle: toggleTemperatureUnit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 19\n      }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n          data: currentWeather,\n          isFahrenheit: isFahrenheit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 15\n        }, this), hourlyForecast && /*#__PURE__*/_jsxDEV(HourlyForecast, {\n          data: hourlyForecast,\n          isFahrenheit: isFahrenheit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 15\n        }, this), dailyForecast && /*#__PURE__*/_jsxDEV(DailyForecast, {\n          data: dailyForecast,\n          isFahrenheit: isFahrenheit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }, this), historicalData && historicalData.length > 0 && /*#__PURE__*/_jsxDEV(HistoricalData, {\n          data: historicalData,\n          isFahrenheit: isFahrenheit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cv9kckSKF8KPoTDvRPaOZgFaj8w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","CurrentWeather","HourlyForecast","DailyForecast","HistoricalData","ErrorMessage","LoadingSpinner","TempUnitToggle","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","city","setCity","currentWeather","setCurrentWeather","hourlyForecast","setHourlyForecast","dailyForecast","setDailyForecast","historicalData","setHistoricalData","error","setError","loading","setLoading","isFahrenheit","setIsFahrenheit","userCoords","setUserCoords","API_KEY","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lon","fetchWeatherByCoords","err","type","message","currentWeatherResponse","fetch","ok","Error","status","currentData","json","name","oneCallResponse","oneCallData","hourly","slice","daily","historicalDataArray","currentDate","Math","floor","Date","now","i","date","historicalResponse","push","fetchWeatherByCity","cityName","coord","toggleTemperatureUnit","handleCitySearch","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onLocationRequest","onToggle","data","length","_c","$RefreshReg$"],"sources":["/Users/samanthawongsf/weather-app-v.2/src/App.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport CurrentWeather from './components/CurrentWeather';\nimport HourlyForecast from './components/HourlyForecast';\nimport DailyForecast from './components/DailyForecast';\nimport HistoricalData from './components/HistoricalData';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport TempUnitToggle from './components/TempUnitToggle';\n\nfunction App() {\n  // State variables\n  const [city, setCity] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [hourlyForecast, setHourlyForecast] = useState(null);\n  const [dailyForecast, setDailyForecast] = useState(null);\n  const [historicalData, setHistoricalData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isFahrenheit, setIsFahrenheit] = useState(false);\n  const [userCoords, setUserCoords] = useState(null);\n\n  const API_KEY = 'f9fe1a574e2792d51fa92b035382ef81';\n\n  // Function to get user's location\n  const getUserLocation = () => {\n    setLoading(true);\n    setError(null);\n    \n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserCoords({ lat: latitude, lon: longitude });\n          fetchWeatherByCoords(latitude, longitude);\n        },\n        (err) => {\n          setLoading(false);\n          setError({\n            type: 'location',\n            message: `Unable to get your location: ${err.message}. Please search for a city instead.`\n          });\n        }\n      );\n    } else {\n      setLoading(false);\n      setError({\n        type: 'location',\n        message: 'Geolocation is not supported by your browser. Please search for a city instead.'\n      });\n    }\n  };\n\n  // Fetch weather data by coordinates\n  const fetchWeatherByCoords = async (lat, lon) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Current weather\n      const currentWeatherResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`\n      );\n      \n      if (!currentWeatherResponse.ok) {\n        throw new Error(`Weather data not available (${currentWeatherResponse.status})`);\n      }\n      \n      const currentData = await currentWeatherResponse.json();\n      setCurrentWeather(currentData);\n      setCity(currentData.name);\n\n      // One Call API for hourly and daily forecasts\n      const oneCallResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely&appid=${API_KEY}`\n      );\n      \n      if (!oneCallResponse.ok) {\n        throw new Error(`Forecast data not available (${oneCallResponse.status})`);\n      }\n      \n      const oneCallData = await oneCallResponse.json();\n      setHourlyForecast(oneCallData.hourly.slice(0, 24));\n      setDailyForecast(oneCallData.daily.slice(0, 5));\n\n      // Historical data (last 5 days)\n      const historicalDataArray = [];\n      const currentDate = Math.floor(Date.now() / 1000);\n      \n      for (let i = 1; i <= 5; i++) {\n        const date = currentDate - (i * 24 * 60 * 60);\n        const historicalResponse = await fetch(\n          `https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${date}&appid=${API_KEY}`\n        );\n        \n        if (historicalResponse.ok) {\n          const historicalData = await historicalResponse.json();\n          historicalDataArray.push(historicalData);\n        }\n      }\n      \n      setHistoricalData(historicalDataArray);\n      setLoading(false);\n\n    } catch (err) {\n      setLoading(false);\n      setError({\n        type: 'api',\n        message: `Error fetching weather data: ${err.message}`\n      });\n    }\n  };\n\n  // Fetch weather by city name\n  const fetchWeatherByCity = async (cityName) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Current weather\n      const currentWeatherResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}`\n      );\n      \n      if (!currentWeatherResponse.ok) {\n        if (currentWeatherResponse.status === 404) {\n          throw new Error(`City \"${cityName}\" not found. Please check the spelling and try again.`);\n        } else {\n          throw new Error(`Weather data not available (${currentWeatherResponse.status})`);\n        }\n      }\n      \n      const currentData = await currentWeatherResponse.json();\n      setCurrentWeather(currentData);\n      setCity(currentData.name);\n\n      // Get coordinates from current weather response\n      const { lat, lon } = currentData.coord;\n      setUserCoords({ lat, lon });\n\n      // One Call API for hourly and daily forecasts\n      const oneCallResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely&appid=${API_KEY}`\n      );\n      \n      if (!oneCallResponse.ok) {\n        throw new Error(`Forecast data not available (${oneCallResponse.status})`);\n      }\n      \n      const oneCallData = await oneCallResponse.json();\n      setHourlyForecast(oneCallData.hourly.slice(0, 24));\n      setDailyForecast(oneCallData.daily.slice(0, 5));\n\n      // Historical data (last 5 days)\n      const historicalDataArray = [];\n      const currentDate = Math.floor(Date.now() / 1000);\n      \n      for (let i = 1; i <= 5; i++) {\n        const date = currentDate - (i * 24 * 60 * 60);\n        const historicalResponse = await fetch(\n          `https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${date}&appid=${API_KEY}`\n        );\n        \n        if (historicalResponse.ok) {\n          const historicalData = await historicalResponse.json();\n          historicalDataArray.push(historicalData);\n        }\n      }\n      \n      setHistoricalData(historicalDataArray);\n      setLoading(false);\n\n    } catch (err) {\n      setLoading(false);\n      setError({\n        type: 'api',\n        message: `Error fetching weather data: ${err.message}`\n      });\n    }\n  };\n\n  // Toggle temperature unit\n  const toggleTemperatureUnit = () => {\n    setIsFahrenheit(!isFahrenheit);\n  };\n\n  // Handle city search\n  const handleCitySearch = (cityName) => {\n    if (cityName.trim() === '') {\n      setError({\n        type: 'input',\n        message: 'Please enter a city name.'\n      });\n      return;\n    }\n    \n    setCity(cityName);\n    fetchWeatherByCity(cityName);\n  };\n\n  // Load user location on initial component mount\n  useEffect(() => {\n    getUserLocation();\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"weather-container\">\n        <h1>Weather App</h1>\n        \n        <SearchBar \n          onSearch={handleCitySearch} \n          onLocationRequest={getUserLocation} \n        />\n        \n        <TempUnitToggle \n          isFahrenheit={isFahrenheit} \n          onToggle={toggleTemperatureUnit} \n        />\n        \n        {error && <ErrorMessage error={error} />}\n        \n        {loading ? (\n          <LoadingSpinner />\n        ) : (\n          <>\n            {currentWeather && (\n              <CurrentWeather \n                data={currentWeather} \n                isFahrenheit={isFahrenheit} \n              />\n            )}\n            \n            {hourlyForecast && (\n              <HourlyForecast \n                data={hourlyForecast} \n                isFahrenheit={isFahrenheit} \n              />\n            )}\n            \n            {dailyForecast && (\n              <DailyForecast \n                data={dailyForecast} \n                isFahrenheit={isFahrenheit} \n              />\n            )}\n            \n            {historicalData && historicalData.length > 0 && (\n              <HistoricalData \n                data={historicalData} \n                isFahrenheit={isFahrenheit} \n              />\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}