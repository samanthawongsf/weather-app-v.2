{"ast":null,"code":"var _jsxFileName = \"/Users/samanthawongsf/weather-app-v.2/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport CurrentWeather from './components/CurrentWeather';\nimport HourlyForecast from './components/HourlyForecast';\nimport DailyForecast from './components/DailyForecast';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport TempUnitToggle from './components/TempUnitToggle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State variables\n  const [city, setCity] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [hourlyForecast, setHourlyForecast] = useState(null);\n  const [dailyForecast, setDailyForecast] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isFahrenheit, setIsFahrenheit] = useState(false);\n  const [userCoords, setUserCoords] = useState(null);\n  const API_KEY = 'f9fe1a574e2792d51fa92b035382ef81';\n\n  // Function to get user's location\n  const getUserLocation = () => {\n    setLoading(true);\n    setError(null);\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setUserCoords({\n          lat: latitude,\n          lon: longitude\n        });\n        fetchWeatherByCoords(latitude, longitude);\n      }, err => {\n        setLoading(false);\n        setError({\n          type: 'location',\n          message: `Unable to get your location: ${err.message}. Please search for a city instead.`\n        });\n      });\n    } else {\n      setLoading(false);\n      setError({\n        type: 'location',\n        message: 'Geolocation is not supported by your browser. Please search for a city instead.'\n      });\n    }\n  };\n\n  // Fetch weather data by coordinates - UPDATED TO USE FREE TIER ENDPOINTS\n  const fetchWeatherByCoords = async (lat, lon) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Current weather - This API endpoint is free\n      const currentWeatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`);\n      if (!currentWeatherResponse.ok) {\n        throw new Error(`Weather data not available (${currentWeatherResponse.status})`);\n      }\n      const currentData = await currentWeatherResponse.json();\n      setCurrentWeather(currentData);\n      setCity(currentData.name);\n\n      // 5-day/3-hour forecast API (free tier) instead of One Call API\n      const forecastResponse = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}`);\n      if (!forecastResponse.ok) {\n        throw new Error(`Forecast data not available (${forecastResponse.status})`);\n      }\n      const forecastData = await forecastResponse.json();\n\n      // Process the forecast data\n      processHourlyForecast(forecastData.list);\n      processDailyForecast(forecastData.list);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError({\n        type: 'api',\n        message: `Error fetching weather data: ${err.message}`\n      });\n    }\n  };\n\n  // Fetch weather by city name - UPDATED TO USE FREE TIER ENDPOINTS\n  const fetchWeatherByCity = async cityName => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Current weather - This API endpoint is free\n      const currentWeatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}`);\n      if (!currentWeatherResponse.ok) {\n        if (currentWeatherResponse.status === 404) {\n          throw new Error(`City \"${cityName}\" not found. Please check the spelling and try again.`);\n        } else {\n          throw new Error(`Weather data not available (${currentWeatherResponse.status})`);\n        }\n      }\n      const currentData = await currentWeatherResponse.json();\n      setCurrentWeather(currentData);\n      setCity(currentData.name);\n\n      // Get coordinates from current weather response\n      const {\n        lat,\n        lon\n      } = currentData.coord;\n      setUserCoords({\n        lat,\n        lon\n      });\n\n      // 5-day/3-hour forecast API (free tier) instead of One Call API\n      const forecastResponse = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${API_KEY}`);\n      if (!forecastResponse.ok) {\n        throw new Error(`Forecast data not available (${forecastResponse.status})`);\n      }\n      const forecastData = await forecastResponse.json();\n\n      // Process the forecast data\n      processHourlyForecast(forecastData.list);\n      processDailyForecast(forecastData.list);\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError({\n        type: 'api',\n        message: `Error fetching weather data: ${err.message}`\n      });\n    }\n  };\n\n  // Process hourly forecast from the free tier API\n  const processHourlyForecast = forecastList => {\n    // Get the next 24 hours (8 items, as each is 3 hours apart)\n    const next24Hours = forecastList.slice(0, 8);\n\n    // Format data to match the structure expected by HourlyForecast component\n    const formattedHourlyData = next24Hours.map(item => ({\n      dt: item.dt,\n      temp: item.main.temp,\n      weather: item.weather\n    }));\n    setHourlyForecast(formattedHourlyData);\n  };\n\n  // Process daily forecast from the free tier API\n  const processDailyForecast = forecastList => {\n    // Group forecasts by day\n    const dailyData = {};\n    const days = [];\n    forecastList.forEach(item => {\n      const date = new Date(item.dt * 1000);\n      const day = date.toDateString();\n      if (!dailyData[day]) {\n        dailyData[day] = {\n          dt: date.getTime() / 1000,\n          temp: {\n            min: item.main.temp_min,\n            max: item.main.temp_max\n          },\n          weather: [item.weather[0]]\n        };\n        days.push(day);\n      } else {\n        // Update min/max temperature\n        if (item.main.temp_min < dailyData[day].temp.min) {\n          dailyData[day].temp.min = item.main.temp_min;\n        }\n        if (item.main.temp_max > dailyData[day].temp.max) {\n          dailyData[day].temp.max = item.main.temp_max;\n        }\n      }\n    });\n\n    // Get 5 days of forecasts\n    const formattedDailyData = days.slice(0, 5).map(day => dailyData[day]);\n    setDailyForecast(formattedDailyData);\n  };\n\n  // Toggle temperature unit\n  const toggleTemperatureUnit = () => {\n    setIsFahrenheit(!isFahrenheit);\n  };\n\n  // Handle city search\n  const handleCitySearch = cityName => {\n    if (cityName.trim() === '') {\n      setError({\n        type: 'input',\n        message: 'Please enter a city name.'\n      });\n      return;\n    }\n    setCity(cityName);\n    fetchWeatherByCity(cityName);\n  };\n\n  // Load user location on initial component mount\n  useEffect(() => {\n    getUserLocation();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weather App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: handleCitySearch,\n        onLocationRequest: getUserLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TempUnitToggle, {\n        isFahrenheit: isFahrenheit,\n        onToggle: toggleTemperatureUnit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 19\n      }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n          data: currentWeather,\n          isFahrenheit: isFahrenheit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this), hourlyForecast && /*#__PURE__*/_jsxDEV(HourlyForecast, {\n          data: hourlyForecast,\n          isFahrenheit: isFahrenheit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }, this), dailyForecast && /*#__PURE__*/_jsxDEV(DailyForecast, {\n          data: dailyForecast,\n          isFahrenheit: isFahrenheit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0yhhQ/LG0KujdSJneOVO3FHEKgA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","CurrentWeather","HourlyForecast","DailyForecast","ErrorMessage","LoadingSpinner","TempUnitToggle","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","city","setCity","currentWeather","setCurrentWeather","hourlyForecast","setHourlyForecast","dailyForecast","setDailyForecast","error","setError","loading","setLoading","isFahrenheit","setIsFahrenheit","userCoords","setUserCoords","API_KEY","getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","lat","lon","fetchWeatherByCoords","err","type","message","currentWeatherResponse","fetch","ok","Error","status","currentData","json","name","forecastResponse","forecastData","processHourlyForecast","list","processDailyForecast","fetchWeatherByCity","cityName","coord","forecastList","next24Hours","slice","formattedHourlyData","map","item","dt","temp","main","weather","dailyData","days","forEach","date","Date","day","toDateString","getTime","min","temp_min","max","temp_max","push","formattedDailyData","toggleTemperatureUnit","handleCitySearch","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onLocationRequest","onToggle","data","_c","$RefreshReg$"],"sources":["/Users/samanthawongsf/weather-app-v.2/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport CurrentWeather from './components/CurrentWeather';\nimport HourlyForecast from './components/HourlyForecast';\nimport DailyForecast from './components/DailyForecast';\nimport ErrorMessage from './components/ErrorMessage';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport TempUnitToggle from './components/TempUnitToggle';\n\nfunction App() {\n  // State variables\n  const [city, setCity] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [hourlyForecast, setHourlyForecast] = useState(null);\n  const [dailyForecast, setDailyForecast] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isFahrenheit, setIsFahrenheit] = useState(false);\n  const [userCoords, setUserCoords] = useState(null);\n\n  const API_KEY = 'f9fe1a574e2792d51fa92b035382ef81';\n\n  // Function to get user's location\n  const getUserLocation = () => {\n    setLoading(true);\n    setError(null);\n    \n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          setUserCoords({ lat: latitude, lon: longitude });\n          fetchWeatherByCoords(latitude, longitude);\n        },\n        (err) => {\n          setLoading(false);\n          setError({\n            type: 'location',\n            message: `Unable to get your location: ${err.message}. Please search for a city instead.`\n          });\n        }\n      );\n    } else {\n      setLoading(false);\n      setError({\n        type: 'location',\n        message: 'Geolocation is not supported by your browser. Please search for a city instead.'\n      });\n    }\n  };\n\n  // Fetch weather data by coordinates - UPDATED TO USE FREE TIER ENDPOINTS\n  const fetchWeatherByCoords = async (lat, lon) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Current weather - This API endpoint is free\n      const currentWeatherResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`\n      );\n      \n      if (!currentWeatherResponse.ok) {\n        throw new Error(`Weather data not available (${currentWeatherResponse.status})`);\n      }\n      \n      const currentData = await currentWeatherResponse.json();\n      setCurrentWeather(currentData);\n      setCity(currentData.name);\n\n      // 5-day/3-hour forecast API (free tier) instead of One Call API\n      const forecastResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}`\n      );\n      \n      if (!forecastResponse.ok) {\n        throw new Error(`Forecast data not available (${forecastResponse.status})`);\n      }\n      \n      const forecastData = await forecastResponse.json();\n      \n      // Process the forecast data\n      processHourlyForecast(forecastData.list);\n      processDailyForecast(forecastData.list);\n      \n      setLoading(false);\n\n    } catch (err) {\n      setLoading(false);\n      setError({\n        type: 'api',\n        message: `Error fetching weather data: ${err.message}`\n      });\n    }\n  };\n\n  // Fetch weather by city name - UPDATED TO USE FREE TIER ENDPOINTS\n  const fetchWeatherByCity = async (cityName) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Current weather - This API endpoint is free\n      const currentWeatherResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}`\n      );\n      \n      if (!currentWeatherResponse.ok) {\n        if (currentWeatherResponse.status === 404) {\n          throw new Error(`City \"${cityName}\" not found. Please check the spelling and try again.`);\n        } else {\n          throw new Error(`Weather data not available (${currentWeatherResponse.status})`);\n        }\n      }\n      \n      const currentData = await currentWeatherResponse.json();\n      setCurrentWeather(currentData);\n      setCity(currentData.name);\n\n      // Get coordinates from current weather response\n      const { lat, lon } = currentData.coord;\n      setUserCoords({ lat, lon });\n\n      // 5-day/3-hour forecast API (free tier) instead of One Call API\n      const forecastResponse = await fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${API_KEY}`\n      );\n      \n      if (!forecastResponse.ok) {\n        throw new Error(`Forecast data not available (${forecastResponse.status})`);\n      }\n      \n      const forecastData = await forecastResponse.json();\n      \n      // Process the forecast data\n      processHourlyForecast(forecastData.list);\n      processDailyForecast(forecastData.list);\n      \n      setLoading(false);\n\n    } catch (err) {\n      setLoading(false);\n      setError({\n        type: 'api',\n        message: `Error fetching weather data: ${err.message}`\n      });\n    }\n  };\n\n  // Process hourly forecast from the free tier API\n  const processHourlyForecast = (forecastList) => {\n    // Get the next 24 hours (8 items, as each is 3 hours apart)\n    const next24Hours = forecastList.slice(0, 8);\n    \n    // Format data to match the structure expected by HourlyForecast component\n    const formattedHourlyData = next24Hours.map(item => ({\n      dt: item.dt,\n      temp: item.main.temp,\n      weather: item.weather\n    }));\n    \n    setHourlyForecast(formattedHourlyData);\n  };\n\n  // Process daily forecast from the free tier API\n  const processDailyForecast = (forecastList) => {\n    // Group forecasts by day\n    const dailyData = {};\n    const days = [];\n    \n    forecastList.forEach(item => {\n      const date = new Date(item.dt * 1000);\n      const day = date.toDateString();\n      \n      if (!dailyData[day]) {\n        dailyData[day] = {\n          dt: date.getTime() / 1000,\n          temp: { min: item.main.temp_min, max: item.main.temp_max },\n          weather: [item.weather[0]]\n        };\n        days.push(day);\n      } else {\n        // Update min/max temperature\n        if (item.main.temp_min < dailyData[day].temp.min) {\n          dailyData[day].temp.min = item.main.temp_min;\n        }\n        if (item.main.temp_max > dailyData[day].temp.max) {\n          dailyData[day].temp.max = item.main.temp_max;\n        }\n      }\n    });\n    \n    // Get 5 days of forecasts\n    const formattedDailyData = days.slice(0, 5).map(day => dailyData[day]);\n    setDailyForecast(formattedDailyData);\n  };\n\n  // Toggle temperature unit\n  const toggleTemperatureUnit = () => {\n    setIsFahrenheit(!isFahrenheit);\n  };\n\n  // Handle city search\n  const handleCitySearch = (cityName) => {\n    if (cityName.trim() === '') {\n      setError({\n        type: 'input',\n        message: 'Please enter a city name.'\n      });\n      return;\n    }\n    \n    setCity(cityName);\n    fetchWeatherByCity(cityName);\n  };\n\n  // Load user location on initial component mount\n  useEffect(() => {\n    getUserLocation();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"weather-container\">\n        <h1>Weather App</h1>\n        \n        <SearchBar \n          onSearch={handleCitySearch} \n          onLocationRequest={getUserLocation} \n        />\n        \n        <TempUnitToggle \n          isFahrenheit={isFahrenheit} \n          onToggle={toggleTemperatureUnit} \n        />\n        \n        {error && <ErrorMessage error={error} />}\n        \n        {loading ? (\n          <LoadingSpinner />\n        ) : (\n          <>\n            {currentWeather && (\n              <CurrentWeather \n                data={currentWeather} \n                isFahrenheit={isFahrenheit} \n              />\n            )}\n            \n            {hourlyForecast && (\n              <HourlyForecast \n                data={hourlyForecast} \n                isFahrenheit={isFahrenheit} \n              />\n            )}\n            \n            {dailyForecast && (\n              <DailyForecast \n                data={dailyForecast} \n                isFahrenheit={isFahrenheit} \n              />\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}